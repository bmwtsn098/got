// Code generated by capnpc-go. DO NOT EDIT.

package gkvproto

import (
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Ref struct{ capnp.Struct }

// Ref_TypeID is the unique identifier for the type Ref.
const Ref_TypeID = 0xa3ef6869efc04f47

func NewRef(s *capnp.Segment) (Ref, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Ref{st}, err
}

func NewRootRef(s *capnp.Segment) (Ref, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Ref{st}, err
}

func ReadRootRef(msg *capnp.Message) (Ref, error) {
	root, err := msg.RootPtr()
	return Ref{root.Struct()}, err
}

func (s Ref) String() string {
	str, _ := text.Marshal(0xa3ef6869efc04f47, s.Struct)
	return str
}

func (s Ref) Cid() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Ref) HasCid() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Ref) SetCid(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Ref) Dek() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Ref) HasDek() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Ref) SetDek(v []byte) error {
	return s.Struct.SetData(1, v)
}

// Ref_List is a list of Ref.
type Ref_List struct{ capnp.List }

// NewRef creates a new list of Ref.
func NewRef_List(s *capnp.Segment, sz int32) (Ref_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Ref_List{l}, err
}

func (s Ref_List) At(i int) Ref { return Ref{s.List.Struct(i)} }

func (s Ref_List) Set(i int, v Ref) error { return s.List.SetStruct(i, v.Struct) }

func (s Ref_List) String() string {
	str, _ := text.MarshalList(0xa3ef6869efc04f47, s.List)
	return str
}

// Ref_Promise is a wrapper for a Ref promised by a client call.
type Ref_Promise struct{ *capnp.Pipeline }

func (p Ref_Promise) Struct() (Ref, error) {
	s, err := p.Pipeline.Struct()
	return Ref{s}, err
}

type Node struct{ capnp.Struct }
type Node_Which uint16

const (
	Node_Which_leaf Node_Which = 0
	Node_Which_tree Node_Which = 1
)

func (w Node_Which) String() string {
	const s = "leaftree"
	switch w {
	case Node_Which_leaf:
		return s[0:4]
	case Node_Which_tree:
		return s[4:8]

	}
	return "Node_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Node_TypeID is the unique identifier for the type Node.
const Node_TypeID = 0x9e73a9d630005f30

func NewNode(s *capnp.Segment) (Node, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Node{st}, err
}

func NewRootNode(s *capnp.Segment) (Node, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Node{st}, err
}

func ReadRootNode(msg *capnp.Message) (Node, error) {
	root, err := msg.RootPtr()
	return Node{root.Struct()}, err
}

func (s Node) String() string {
	str, _ := text.Marshal(0x9e73a9d630005f30, s.Struct)
	return str
}

func (s Node) Which() Node_Which {
	return Node_Which(s.Struct.Uint16(0))
}
func (s Node) Leaf() (Leaf, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != leaf")
	}
	p, err := s.Struct.Ptr(0)
	return Leaf{Struct: p.Struct()}, err
}

func (s Node) HasLeaf() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Node) SetLeaf(v Leaf) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewLeaf sets the leaf field to a newly
// allocated Leaf struct, preferring placement in s's segment.
func (s Node) NewLeaf() (Leaf, error) {
	s.Struct.SetUint16(0, 0)
	ss, err := NewLeaf(s.Struct.Segment())
	if err != nil {
		return Leaf{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Node) Tree() (Tree, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != tree")
	}
	p, err := s.Struct.Ptr(0)
	return Tree{Struct: p.Struct()}, err
}

func (s Node) HasTree() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Node) SetTree(v Tree) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewTree sets the tree field to a newly
// allocated Tree struct, preferring placement in s's segment.
func (s Node) NewTree() (Tree, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewTree(s.Struct.Segment())
	if err != nil {
		return Tree{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Node_List is a list of Node.
type Node_List struct{ capnp.List }

// NewNode creates a new list of Node.
func NewNode_List(s *capnp.Segment, sz int32) (Node_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Node_List{l}, err
}

func (s Node_List) At(i int) Node { return Node{s.List.Struct(i)} }

func (s Node_List) Set(i int, v Node) error { return s.List.SetStruct(i, v.Struct) }

func (s Node_List) String() string {
	str, _ := text.MarshalList(0x9e73a9d630005f30, s.List)
	return str
}

// Node_Promise is a wrapper for a Node promised by a client call.
type Node_Promise struct{ *capnp.Pipeline }

func (p Node_Promise) Struct() (Node, error) {
	s, err := p.Pipeline.Struct()
	return Node{s}, err
}

func (p Node_Promise) Leaf() Leaf_Promise {
	return Leaf_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Node_Promise) Tree() Tree_Promise {
	return Tree_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Entry struct{ capnp.Struct }

// Entry_TypeID is the unique identifier for the type Entry.
const Entry_TypeID = 0xcbfe2c72eb369a63

func NewEntry(s *capnp.Segment) (Entry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Entry{st}, err
}

func NewRootEntry(s *capnp.Segment) (Entry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Entry{st}, err
}

func ReadRootEntry(msg *capnp.Message) (Entry, error) {
	root, err := msg.RootPtr()
	return Entry{root.Struct()}, err
}

func (s Entry) String() string {
	str, _ := text.Marshal(0xcbfe2c72eb369a63, s.Struct)
	return str
}

func (s Entry) Key() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Entry) HasKey() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Entry) SetKey(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Entry) Value() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Entry) HasValue() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Entry) SetValue(v []byte) error {
	return s.Struct.SetData(1, v)
}

// Entry_List is a list of Entry.
type Entry_List struct{ capnp.List }

// NewEntry creates a new list of Entry.
func NewEntry_List(s *capnp.Segment, sz int32) (Entry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Entry_List{l}, err
}

func (s Entry_List) At(i int) Entry { return Entry{s.List.Struct(i)} }

func (s Entry_List) Set(i int, v Entry) error { return s.List.SetStruct(i, v.Struct) }

func (s Entry_List) String() string {
	str, _ := text.MarshalList(0xcbfe2c72eb369a63, s.List)
	return str
}

// Entry_Promise is a wrapper for a Entry promised by a client call.
type Entry_Promise struct{ *capnp.Pipeline }

func (p Entry_Promise) Struct() (Entry, error) {
	s, err := p.Pipeline.Struct()
	return Entry{s}, err
}

type Leaf struct{ capnp.Struct }

// Leaf_TypeID is the unique identifier for the type Leaf.
const Leaf_TypeID = 0xb14340ce42286afd

func NewLeaf(s *capnp.Segment) (Leaf, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Leaf{st}, err
}

func NewRootLeaf(s *capnp.Segment) (Leaf, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Leaf{st}, err
}

func ReadRootLeaf(msg *capnp.Message) (Leaf, error) {
	root, err := msg.RootPtr()
	return Leaf{root.Struct()}, err
}

func (s Leaf) String() string {
	str, _ := text.Marshal(0xb14340ce42286afd, s.Struct)
	return str
}

func (s Leaf) Entries() (Entry_List, error) {
	p, err := s.Struct.Ptr(0)
	return Entry_List{List: p.List()}, err
}

func (s Leaf) HasEntries() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Leaf) SetEntries(v Entry_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated Entry_List, preferring placement in s's segment.
func (s Leaf) NewEntries(n int32) (Entry_List, error) {
	l, err := NewEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return Entry_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Leaf_List is a list of Leaf.
type Leaf_List struct{ capnp.List }

// NewLeaf creates a new list of Leaf.
func NewLeaf_List(s *capnp.Segment, sz int32) (Leaf_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Leaf_List{l}, err
}

func (s Leaf_List) At(i int) Leaf { return Leaf{s.List.Struct(i)} }

func (s Leaf_List) Set(i int, v Leaf) error { return s.List.SetStruct(i, v.Struct) }

func (s Leaf_List) String() string {
	str, _ := text.MarshalList(0xb14340ce42286afd, s.List)
	return str
}

// Leaf_Promise is a wrapper for a Leaf promised by a client call.
type Leaf_Promise struct{ *capnp.Pipeline }

func (p Leaf_Promise) Struct() (Leaf, error) {
	s, err := p.Pipeline.Struct()
	return Leaf{s}, err
}

type ChildRef struct{ capnp.Struct }

// ChildRef_TypeID is the unique identifier for the type ChildRef.
const ChildRef_TypeID = 0xd9d81228684d41ca

func NewChildRef(s *capnp.Segment) (ChildRef, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ChildRef{st}, err
}

func NewRootChildRef(s *capnp.Segment) (ChildRef, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ChildRef{st}, err
}

func ReadRootChildRef(msg *capnp.Message) (ChildRef, error) {
	root, err := msg.RootPtr()
	return ChildRef{root.Struct()}, err
}

func (s ChildRef) String() string {
	str, _ := text.Marshal(0xd9d81228684d41ca, s.Struct)
	return str
}

func (s ChildRef) Prefix() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ChildRef) HasPrefix() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ChildRef) SetPrefix(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s ChildRef) Ref() (Ref, error) {
	p, err := s.Struct.Ptr(1)
	return Ref{Struct: p.Struct()}, err
}

func (s ChildRef) HasRef() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ChildRef) SetRef(v Ref) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewRef sets the ref field to a newly
// allocated Ref struct, preferring placement in s's segment.
func (s ChildRef) NewRef() (Ref, error) {
	ss, err := NewRef(s.Struct.Segment())
	if err != nil {
		return Ref{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// ChildRef_List is a list of ChildRef.
type ChildRef_List struct{ capnp.List }

// NewChildRef creates a new list of ChildRef.
func NewChildRef_List(s *capnp.Segment, sz int32) (ChildRef_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return ChildRef_List{l}, err
}

func (s ChildRef_List) At(i int) ChildRef { return ChildRef{s.List.Struct(i)} }

func (s ChildRef_List) Set(i int, v ChildRef) error { return s.List.SetStruct(i, v.Struct) }

func (s ChildRef_List) String() string {
	str, _ := text.MarshalList(0xd9d81228684d41ca, s.List)
	return str
}

// ChildRef_Promise is a wrapper for a ChildRef promised by a client call.
type ChildRef_Promise struct{ *capnp.Pipeline }

func (p ChildRef_Promise) Struct() (ChildRef, error) {
	s, err := p.Pipeline.Struct()
	return ChildRef{s}, err
}

func (p ChildRef_Promise) Ref() Ref_Promise {
	return Ref_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type Tree struct{ capnp.Struct }

// Tree_TypeID is the unique identifier for the type Tree.
const Tree_TypeID = 0xdf88e570869a255c

func NewTree(s *capnp.Segment) (Tree, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Tree{st}, err
}

func NewRootTree(s *capnp.Segment) (Tree, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Tree{st}, err
}

func ReadRootTree(msg *capnp.Message) (Tree, error) {
	root, err := msg.RootPtr()
	return Tree{root.Struct()}, err
}

func (s Tree) String() string {
	str, _ := text.Marshal(0xdf88e570869a255c, s.Struct)
	return str
}

func (s Tree) Entries() (Entry_List, error) {
	p, err := s.Struct.Ptr(0)
	return Entry_List{List: p.List()}, err
}

func (s Tree) HasEntries() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Tree) SetEntries(v Entry_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated Entry_List, preferring placement in s's segment.
func (s Tree) NewEntries(n int32) (Entry_List, error) {
	l, err := NewEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return Entry_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Tree) Children() (ChildRef_List, error) {
	p, err := s.Struct.Ptr(1)
	return ChildRef_List{List: p.List()}, err
}

func (s Tree) HasChildren() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Tree) SetChildren(v ChildRef_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewChildren sets the children field to a newly
// allocated ChildRef_List, preferring placement in s's segment.
func (s Tree) NewChildren(n int32) (ChildRef_List, error) {
	l, err := NewChildRef_List(s.Struct.Segment(), n)
	if err != nil {
		return ChildRef_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// Tree_List is a list of Tree.
type Tree_List struct{ capnp.List }

// NewTree creates a new list of Tree.
func NewTree_List(s *capnp.Segment, sz int32) (Tree_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Tree_List{l}, err
}

func (s Tree_List) At(i int) Tree { return Tree{s.List.Struct(i)} }

func (s Tree_List) Set(i int, v Tree) error { return s.List.SetStruct(i, v.Struct) }

func (s Tree_List) String() string {
	str, _ := text.MarshalList(0xdf88e570869a255c, s.List)
	return str
}

// Tree_Promise is a wrapper for a Tree promised by a client call.
type Tree_Promise struct{ *capnp.Pipeline }

func (p Tree_Promise) Struct() (Tree, error) {
	s, err := p.Pipeline.Struct()
	return Tree{s}, err
}

const schema_bf31eccc5703e3c8 = "x\xda\x8c\x92?h\x13a\x18\xc6\x9f\xe7\xbb\xc4\xeb\x90" +
	"\x98\x9c\xa7\xe8&\x94\x0aQTR\x11\x87\xa24M\x09" +
	"\xa2\xf8\xa7_Qt\x10$\xe4\xbe3gB\x1a\xbe\xc6" +
	"j'\xc1A$\xa3c\x07A\xc4\xa1\x82C\x07g\x1d" +
	"E\xc5Qt\x12\x91\x0e\xa2P\x1c\x1cD\xec\xc9\xdd5" +
	"\xb9\xa4\x1c\x98\xed\xe1\xe5\xc7\xf3<\xdf\xfb~\xc5=," +
	"\x89\xc9\xf4^\x01\xc8}\xe9\x1d\x7f\x8a\xd7\x8b\x1fV\x17" +
	"\x1f\xc9\x0c\xe9\xbf\xfej\\y\xf7c\xf2%*4\x05" +
	"`\xfd\xecZ\xbfM\xc0\xfau\x1b\xf4O_|\xb5\xe1" +
	"\xd57\x9e\xc0\xca\x0c\x90ia\x02\xb6\xe4=\xfb2#" +
	"\x15\xb0\x7fo\x16\xca\xefK\xb3k\xdb\xd8\x90x\xce\xae" +
	"\xfd\"Tk\x9c\x06\xfd\xda\xca\x89\xef\xfa\xf0\xe6\xdb$" +
	"\xdf/|h\x7f\x0b\xd9\xf5\xd0\xf7\xcd\xcc\xf9za\xd7" +
	"\xc7OI\xec\x8cxf\x9f\x09UE\x04\xec\xb5\x03+" +
	"\xf7\xdb\xeb\x0f>'\xb1\x8fE\xd7^\x0d\xd5\xd3\x90\xbd" +
	"\xb1\xd0i,\x1d\xadU\xd9n\xb5\xa7.,8\x0a\x98" +
	"#\xe5\x98\x91\xca\xf8~\x8a\x80u\xf0\x10 '\x0c\xca" +
	"\xa2`\x96\x9b\xfen\x06\xd3#\xc1\xb4`P\x1e\x17\xcc" +
	"5U\xd5e>~;\xc8<\x98\xebh\xa5\x98\x8f\xeb" +
	"D\xe3\xe1\xc8y\xe5\xf6\x02\x81(o<\xce\xb3\xc8\xad" +
	"\xb8\xf18\xce\xacy\x0e\xb3\x10\xcc\x82\xa6\xa3\x1a==" +
	"l|NU\xdd\xe8-\xa9\xbeu\xb6\x0c\xc81\x83r" +
	"B\xf0\xaeju\xb4\xa7\x16\xb9\x13\x9c3\xc8||\x0e" +
	"0\x18\x0e\xdbUZ\x1d\xcd\xe5Q\x9a\x1e\x1bh\xdaP" +
	"\xcb\xbdv\xfb\x97\xaa\xcd[*\xb9\xebl\xddk\xe6\x9c" +
	"y\xe5n\xf3\x9f\xfa\xcf&\xa6\xdbZ\xb9\xde\x9d\xfe2" +
	"\xb4\x0a\xce\xd0\xff\xaeI\xfb\xbe\xa4U|\xe2^Ny" +
	"+\xa74\x90s\xea, O\x1a\x94WG\xd9U\xad" +
	"\xee5\x1d\xadZ\x00b\xa8\xffg#\xe8_\x00\x00\x00" +
	"\xff\xff\\\x88\xd6V"

func init() {
	schemas.Register(schema_bf31eccc5703e3c8,
		0x9e73a9d630005f30,
		0xa3ef6869efc04f47,
		0xb14340ce42286afd,
		0xcbfe2c72eb369a63,
		0xd9d81228684d41ca,
		0xdf88e570869a255c)
}
