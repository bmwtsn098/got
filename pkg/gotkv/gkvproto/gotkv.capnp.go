// Code generated by capnpc-go. DO NOT EDIT.

package gkvproto

import (
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Ref struct{ capnp.Struct }

// Ref_TypeID is the unique identifier for the type Ref.
const Ref_TypeID = 0xa3ef6869efc04f47

func NewRef(s *capnp.Segment) (Ref, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Ref{st}, err
}

func NewRootRef(s *capnp.Segment) (Ref, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Ref{st}, err
}

func ReadRootRef(msg *capnp.Message) (Ref, error) {
	root, err := msg.RootPtr()
	return Ref{root.Struct()}, err
}

func (s Ref) String() string {
	str, _ := text.Marshal(0xa3ef6869efc04f47, s.Struct)
	return str
}

func (s Ref) Cid() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Ref) HasCid() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Ref) SetCid(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Ref) Dek() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Ref) HasDek() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Ref) SetDek(v []byte) error {
	return s.Struct.SetData(1, v)
}

// Ref_List is a list of Ref.
type Ref_List struct{ capnp.List }

// NewRef creates a new list of Ref.
func NewRef_List(s *capnp.Segment, sz int32) (Ref_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Ref_List{l}, err
}

func (s Ref_List) At(i int) Ref { return Ref{s.List.Struct(i)} }

func (s Ref_List) Set(i int, v Ref) error { return s.List.SetStruct(i, v.Struct) }

func (s Ref_List) String() string {
	str, _ := text.MarshalList(0xa3ef6869efc04f47, s.List)
	return str
}

// Ref_Promise is a wrapper for a Ref promised by a client call.
type Ref_Promise struct{ *capnp.Pipeline }

func (p Ref_Promise) Struct() (Ref, error) {
	s, err := p.Pipeline.Struct()
	return Ref{s}, err
}

type Node struct{ capnp.Struct }
type Node_Which uint16

const (
	Node_Which_child  Node_Which = 0
	Node_Which_parent Node_Which = 1
)

func (w Node_Which) String() string {
	const s = "childparent"
	switch w {
	case Node_Which_child:
		return s[0:5]
	case Node_Which_parent:
		return s[5:11]

	}
	return "Node_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Node_TypeID is the unique identifier for the type Node.
const Node_TypeID = 0x9e73a9d630005f30

func NewNode(s *capnp.Segment) (Node, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Node{st}, err
}

func NewRootNode(s *capnp.Segment) (Node, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Node{st}, err
}

func ReadRootNode(msg *capnp.Message) (Node, error) {
	root, err := msg.RootPtr()
	return Node{root.Struct()}, err
}

func (s Node) String() string {
	str, _ := text.Marshal(0x9e73a9d630005f30, s.Struct)
	return str
}

func (s Node) Which() Node_Which {
	return Node_Which(s.Struct.Uint16(0))
}
func (s Node) Child() (Child, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != child")
	}
	p, err := s.Struct.Ptr(0)
	return Child{Struct: p.Struct()}, err
}

func (s Node) HasChild() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Node) SetChild(v Child) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewChild sets the child field to a newly
// allocated Child struct, preferring placement in s's segment.
func (s Node) NewChild() (Child, error) {
	s.Struct.SetUint16(0, 0)
	ss, err := NewChild(s.Struct.Segment())
	if err != nil {
		return Child{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Node) Parent() (Parent, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != parent")
	}
	p, err := s.Struct.Ptr(0)
	return Parent{Struct: p.Struct()}, err
}

func (s Node) HasParent() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Node) SetParent(v Parent) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewParent sets the parent field to a newly
// allocated Parent struct, preferring placement in s's segment.
func (s Node) NewParent() (Parent, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewParent(s.Struct.Segment())
	if err != nil {
		return Parent{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Node_List is a list of Node.
type Node_List struct{ capnp.List }

// NewNode creates a new list of Node.
func NewNode_List(s *capnp.Segment, sz int32) (Node_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Node_List{l}, err
}

func (s Node_List) At(i int) Node { return Node{s.List.Struct(i)} }

func (s Node_List) Set(i int, v Node) error { return s.List.SetStruct(i, v.Struct) }

func (s Node_List) String() string {
	str, _ := text.MarshalList(0x9e73a9d630005f30, s.List)
	return str
}

// Node_Promise is a wrapper for a Node promised by a client call.
type Node_Promise struct{ *capnp.Pipeline }

func (p Node_Promise) Struct() (Node, error) {
	s, err := p.Pipeline.Struct()
	return Node{s}, err
}

func (p Node_Promise) Child() Child_Promise {
	return Child_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Node_Promise) Parent() Parent_Promise {
	return Parent_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Entry struct{ capnp.Struct }

// Entry_TypeID is the unique identifier for the type Entry.
const Entry_TypeID = 0xcbfe2c72eb369a63

func NewEntry(s *capnp.Segment) (Entry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Entry{st}, err
}

func NewRootEntry(s *capnp.Segment) (Entry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Entry{st}, err
}

func ReadRootEntry(msg *capnp.Message) (Entry, error) {
	root, err := msg.RootPtr()
	return Entry{root.Struct()}, err
}

func (s Entry) String() string {
	str, _ := text.Marshal(0xcbfe2c72eb369a63, s.Struct)
	return str
}

func (s Entry) Key() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Entry) HasKey() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Entry) SetKey(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Entry) Value() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Entry) HasValue() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Entry) SetValue(v []byte) error {
	return s.Struct.SetData(1, v)
}

// Entry_List is a list of Entry.
type Entry_List struct{ capnp.List }

// NewEntry creates a new list of Entry.
func NewEntry_List(s *capnp.Segment, sz int32) (Entry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Entry_List{l}, err
}

func (s Entry_List) At(i int) Entry { return Entry{s.List.Struct(i)} }

func (s Entry_List) Set(i int, v Entry) error { return s.List.SetStruct(i, v.Struct) }

func (s Entry_List) String() string {
	str, _ := text.MarshalList(0xcbfe2c72eb369a63, s.List)
	return str
}

// Entry_Promise is a wrapper for a Entry promised by a client call.
type Entry_Promise struct{ *capnp.Pipeline }

func (p Entry_Promise) Struct() (Entry, error) {
	s, err := p.Pipeline.Struct()
	return Entry{s}, err
}

type Child struct{ capnp.Struct }

// Child_TypeID is the unique identifier for the type Child.
const Child_TypeID = 0xb5f5b4a9f6f67b57

func NewChild(s *capnp.Segment) (Child, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Child{st}, err
}

func NewRootChild(s *capnp.Segment) (Child, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Child{st}, err
}

func ReadRootChild(msg *capnp.Message) (Child, error) {
	root, err := msg.RootPtr()
	return Child{root.Struct()}, err
}

func (s Child) String() string {
	str, _ := text.Marshal(0xb5f5b4a9f6f67b57, s.Struct)
	return str
}

func (s Child) Entries() (Entry_List, error) {
	p, err := s.Struct.Ptr(0)
	return Entry_List{List: p.List()}, err
}

func (s Child) HasEntries() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Child) SetEntries(v Entry_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated Entry_List, preferring placement in s's segment.
func (s Child) NewEntries(n int32) (Entry_List, error) {
	l, err := NewEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return Entry_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Child_List is a list of Child.
type Child_List struct{ capnp.List }

// NewChild creates a new list of Child.
func NewChild_List(s *capnp.Segment, sz int32) (Child_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Child_List{l}, err
}

func (s Child_List) At(i int) Child { return Child{s.List.Struct(i)} }

func (s Child_List) Set(i int, v Child) error { return s.List.SetStruct(i, v.Struct) }

func (s Child_List) String() string {
	str, _ := text.MarshalList(0xb5f5b4a9f6f67b57, s.List)
	return str
}

// Child_Promise is a wrapper for a Child promised by a client call.
type Child_Promise struct{ *capnp.Pipeline }

func (p Child_Promise) Struct() (Child, error) {
	s, err := p.Pipeline.Struct()
	return Child{s}, err
}

type ChildRef struct{ capnp.Struct }

// ChildRef_TypeID is the unique identifier for the type ChildRef.
const ChildRef_TypeID = 0xd9d81228684d41ca

func NewChildRef(s *capnp.Segment) (ChildRef, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ChildRef{st}, err
}

func NewRootChildRef(s *capnp.Segment) (ChildRef, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ChildRef{st}, err
}

func ReadRootChildRef(msg *capnp.Message) (ChildRef, error) {
	root, err := msg.RootPtr()
	return ChildRef{root.Struct()}, err
}

func (s ChildRef) String() string {
	str, _ := text.Marshal(0xd9d81228684d41ca, s.Struct)
	return str
}

func (s ChildRef) CommonPrefix() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ChildRef) HasCommonPrefix() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ChildRef) SetCommonPrefix(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s ChildRef) Ref() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s ChildRef) HasRef() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ChildRef) SetRef(v []byte) error {
	return s.Struct.SetData(1, v)
}

// ChildRef_List is a list of ChildRef.
type ChildRef_List struct{ capnp.List }

// NewChildRef creates a new list of ChildRef.
func NewChildRef_List(s *capnp.Segment, sz int32) (ChildRef_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return ChildRef_List{l}, err
}

func (s ChildRef_List) At(i int) ChildRef { return ChildRef{s.List.Struct(i)} }

func (s ChildRef_List) Set(i int, v ChildRef) error { return s.List.SetStruct(i, v.Struct) }

func (s ChildRef_List) String() string {
	str, _ := text.MarshalList(0xd9d81228684d41ca, s.List)
	return str
}

// ChildRef_Promise is a wrapper for a ChildRef promised by a client call.
type ChildRef_Promise struct{ *capnp.Pipeline }

func (p ChildRef_Promise) Struct() (ChildRef, error) {
	s, err := p.Pipeline.Struct()
	return ChildRef{s}, err
}

type Parent struct{ capnp.Struct }

// Parent_TypeID is the unique identifier for the type Parent.
const Parent_TypeID = 0x9650c61a6432125a

func NewParent(s *capnp.Segment) (Parent, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Parent{st}, err
}

func NewRootParent(s *capnp.Segment) (Parent, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Parent{st}, err
}

func ReadRootParent(msg *capnp.Message) (Parent, error) {
	root, err := msg.RootPtr()
	return Parent{root.Struct()}, err
}

func (s Parent) String() string {
	str, _ := text.Marshal(0x9650c61a6432125a, s.Struct)
	return str
}

func (s Parent) Entry() (Entry, error) {
	p, err := s.Struct.Ptr(0)
	return Entry{Struct: p.Struct()}, err
}

func (s Parent) HasEntry() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Parent) SetEntry(v Entry) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewEntry sets the entry field to a newly
// allocated Entry struct, preferring placement in s's segment.
func (s Parent) NewEntry() (Entry, error) {
	ss, err := NewEntry(s.Struct.Segment())
	if err != nil {
		return Entry{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Parent) Children() (ChildRef_List, error) {
	p, err := s.Struct.Ptr(1)
	return ChildRef_List{List: p.List()}, err
}

func (s Parent) HasChildren() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Parent) SetChildren(v ChildRef_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewChildren sets the children field to a newly
// allocated ChildRef_List, preferring placement in s's segment.
func (s Parent) NewChildren(n int32) (ChildRef_List, error) {
	l, err := NewChildRef_List(s.Struct.Segment(), n)
	if err != nil {
		return ChildRef_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// Parent_List is a list of Parent.
type Parent_List struct{ capnp.List }

// NewParent creates a new list of Parent.
func NewParent_List(s *capnp.Segment, sz int32) (Parent_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Parent_List{l}, err
}

func (s Parent_List) At(i int) Parent { return Parent{s.List.Struct(i)} }

func (s Parent_List) Set(i int, v Parent) error { return s.List.SetStruct(i, v.Struct) }

func (s Parent_List) String() string {
	str, _ := text.MarshalList(0x9650c61a6432125a, s.List)
	return str
}

// Parent_Promise is a wrapper for a Parent promised by a client call.
type Parent_Promise struct{ *capnp.Pipeline }

func (p Parent_Promise) Struct() (Parent, error) {
	s, err := p.Pipeline.Struct()
	return Parent{s}, err
}

func (p Parent_Promise) Entry() Entry_Promise {
	return Entry_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_bf31eccc5703e3c8 = "x\xda\x8c\x91?h\x13Q\x1c\xc7\xbf\xdfw\x89\xe9\x90" +
	"\xd8\xbb\x9c\xa0\xb8\x04C\x85\x16\xaa$AD\xba\xd4?" +
	"\x14EP\xef\x15\xa4(\x88\x84\xdc\x8b9\x93\\\xc2\xf5" +
	"l\x0d\x0e\x82\xa3c\x07\x87\x0e.Nu\xb6\x83\x83\xe8" +
	"\xa2\xf8o\x16\x9d\x1d\x15\x8aC\x0b\"\xf4\xe4\xaeI." +
	"I#8\xdd\x8f\xc7\xf7>\xbf\xcf\xfb\xbeB\x96gE" +
	"1yX\x00\xf2H\xf2@p3[\xb2\x8f\xbe\xb3\x9e" +
	"\xc0H3x\xff][\xfa\xfc\xb3\xf8\x1aI\x91\x02\x8c" +
	"_\xeb\xc6\xef\xf0\xbb\xbd\x0a\xfe)\xdc.|\xd9X~" +
	"*\xd3\x1c\xc8-0%\x00S\xf1\xb1\xd9d\x0a0\x1d" +
	"\xae\x82\xc1\xc5ko\xb6\x9c\xda\xd6\xb31P\xf3-\x1f" +
	"\x99\x1f\xb87\x85\xd9\xa5\x07;;\x1b/\xb67G\xb2" +
	"Q\xe2\x98X3g\xa2\xbf\x8e\x8by0\xa8\xac\x9f\xfe" +
	"\xe1\xcd\xee~\x1a\xc7\xbd.\xd6\xcc[\xd1tC\x84\xdc" +
	"\x8f\xe7\xae\xd4\xa6\xb3_\xbf\x8d\xcbn\x8a\xe7\xe6\xabh" +
	"z\x19e\xef\xb4\xfc\xfa\xca\xc9J\x99m\xb7=g\x95" +
	"=\xa5\xb9\xbeE\xca\x09-\x01$\x08\x183%@N" +
	"i\x94\x05A\x83<\xc4\xf0\xf0\xc4e@\xcej\x94\x97" +
	"\x04s\xca\xf5\xbd\x0e\xf5\xd8\x11\xa4\x1e:\xd7\x9c\x86\xed" +
	")\x17\x00\x0f\x82\x96F\xea\xb1\x1c\x18\x1e\x0e\x0b\\m" +
	"\xd9\x0a\xe8\xeeO\x07\xc1>\x81\x0cw\x83\xae\xc1\x1c " +
	"\xa75\xcaS\x82\xb9h\x13\xf5\xb8\xd1=\x83\xf9v\xd9" +
	"S\xaeO=~\xeb\xae\xda\xd0\xd6EU\xc5\xc8\x9d\xf3" +
	"\xe3\xee\x9c\x8f7\xa6*\x8e\xcd\x0c\x043`\xcaV\xf5" +
	"\xde<\x0c\xbePs\x1a\xb4Ct\xa2\x8f\xce\x9c\x07\xe4" +
	"\x84F9%\xf80l\xceQ\xcbq;\x83\x15\xeek" +
	"g\xc1\xf5=v\xfe\xc7\xb44`ZW\x9d\x9e]n" +
	"\xa5\xdc\xb8\xa7\xfe\xed:i/\xaa\xea\x08\xffn\x8c\xea" +
	"\xf3\x8b\xf9\xee\xeb\x9f\x11\x0c*\xadf\xb3\xe5Z\x1e&" +
	"U\xd5\xb9\xdf/\xc5S\xd5\xde\xfc7\x00\x00\xff\xff@" +
	"\xe3\xd4\xc2"

func init() {
	schemas.Register(schema_bf31eccc5703e3c8,
		0x9650c61a6432125a,
		0x9e73a9d630005f30,
		0xa3ef6869efc04f47,
		0xb5f5b4a9f6f67b57,
		0xcbfe2c72eb369a63,
		0xd9d81228684d41ca)
}
